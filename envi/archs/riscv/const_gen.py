# Generated from:
#   b'https://github.com/riscv/riscv-isa-manual'
#   b'tags/draft-20221004-28b46de'
#   b'28b46de77ca7fb94ffcf6cf669cc27269f6013de'

import enum
from collections import namedtuple


class RISCV_FORM(enum.IntEnum):
    R_TYPE = enum.auto()
    I_TYPE = enum.auto()
    S_TYPE = enum.auto()
    B_TYPE = enum.auto()
    U_TYPE = enum.auto()
    J_TYPE = enum.auto()
    R4_TYPE = enum.auto()
    CR = enum.auto()
    CI = enum.auto()
    CSS = enum.auto()
    CIW = enum.auto()
    CL = enum.auto()
    CS = enum.auto()
    CA = enum.auto()
    CB = enum.auto()
    CJ = enum.auto()


class RISCV_FIELD(enum.IntEnum):
    REG = enum.auto()
    C_REG = enum.auto()
    CSR_REG = enum.auto()
    MEM = enum.auto()
    MEM_SP = enum.auto()
    IMM = enum.auto()
    RM = enum.auto()


class RISCV_INS(enum.IntEnum):
    ADD = enum.auto()
    ADDI = enum.auto()
    ADDIW = enum.auto()
    ADDW = enum.auto()
    AMOADD_D = enum.auto()
    AMOADD_W = enum.auto()
    AMOAND_D = enum.auto()
    AMOAND_W = enum.auto()
    AMOMAXU_D = enum.auto()
    AMOMAXU_W = enum.auto()
    AMOMAX_D = enum.auto()
    AMOMAX_W = enum.auto()
    AMOMINU_D = enum.auto()
    AMOMINU_W = enum.auto()
    AMOMIN_D = enum.auto()
    AMOMIN_W = enum.auto()
    AMOOR_D = enum.auto()
    AMOOR_W = enum.auto()
    AMOSWAP_D = enum.auto()
    AMOSWAP_W = enum.auto()
    AMOXOR_D = enum.auto()
    AMOXOR_W = enum.auto()
    AND = enum.auto()
    ANDI = enum.auto()
    AUIPC = enum.auto()
    BEQ = enum.auto()
    BGE = enum.auto()
    BGEU = enum.auto()
    BLT = enum.auto()
    BLTU = enum.auto()
    BNE = enum.auto()
    CSRRC = enum.auto()
    CSRRCI = enum.auto()
    CSRRS = enum.auto()
    CSRRSI = enum.auto()
    CSRRW = enum.auto()
    CSRRWI = enum.auto()
    C_ADD = enum.auto()
    C_ADDI = enum.auto()
    C_ADDI16SP = enum.auto()
    C_ADDI4SPN = enum.auto()
    C_ADDIW = enum.auto()
    C_ADDW = enum.auto()
    C_AND = enum.auto()
    C_ANDI = enum.auto()
    C_BEQZ = enum.auto()
    C_BNEZ = enum.auto()
    C_EBREAK = enum.auto()
    C_J = enum.auto()
    C_JAL = enum.auto()
    C_JALR = enum.auto()
    C_JR = enum.auto()
    C_LI = enum.auto()
    C_LUI = enum.auto()
    C_MV = enum.auto()
    C_NOP = enum.auto()
    C_OR = enum.auto()
    C_SLLI = enum.auto()
    C_SRAI = enum.auto()
    C_SRLI = enum.auto()
    C_SUB = enum.auto()
    C_SUBW = enum.auto()
    C_XOR = enum.auto()
    DIV = enum.auto()
    DIVU = enum.auto()
    DIVUW = enum.auto()
    DIVW = enum.auto()
    EBREAK = enum.auto()
    ECALL = enum.auto()
    FADD_D = enum.auto()
    FADD_H = enum.auto()
    FADD_Q = enum.auto()
    FADD_S = enum.auto()
    FCLASS_D = enum.auto()
    FCLASS_H = enum.auto()
    FCLASS_Q = enum.auto()
    FCLASS_S = enum.auto()
    FCVT_D_H = enum.auto()
    FCVT_D_L = enum.auto()
    FCVT_D_LU = enum.auto()
    FCVT_D_Q = enum.auto()
    FCVT_D_S = enum.auto()
    FCVT_D_W = enum.auto()
    FCVT_D_WU = enum.auto()
    FCVT_H_D = enum.auto()
    FCVT_H_L = enum.auto()
    FCVT_H_LU = enum.auto()
    FCVT_H_Q = enum.auto()
    FCVT_H_S = enum.auto()
    FCVT_H_W = enum.auto()
    FCVT_H_WU = enum.auto()
    FCVT_LU_D = enum.auto()
    FCVT_LU_H = enum.auto()
    FCVT_LU_Q = enum.auto()
    FCVT_LU_S = enum.auto()
    FCVT_L_D = enum.auto()
    FCVT_L_H = enum.auto()
    FCVT_L_Q = enum.auto()
    FCVT_L_S = enum.auto()
    FCVT_Q_D = enum.auto()
    FCVT_Q_H = enum.auto()
    FCVT_Q_L = enum.auto()
    FCVT_Q_LU = enum.auto()
    FCVT_Q_S = enum.auto()
    FCVT_Q_W = enum.auto()
    FCVT_Q_WU = enum.auto()
    FCVT_S_D = enum.auto()
    FCVT_S_H = enum.auto()
    FCVT_S_L = enum.auto()
    FCVT_S_LU = enum.auto()
    FCVT_S_Q = enum.auto()
    FCVT_S_W = enum.auto()
    FCVT_S_WU = enum.auto()
    FCVT_WU_D = enum.auto()
    FCVT_WU_H = enum.auto()
    FCVT_WU_Q = enum.auto()
    FCVT_WU_S = enum.auto()
    FCVT_W_D = enum.auto()
    FCVT_W_H = enum.auto()
    FCVT_W_Q = enum.auto()
    FCVT_W_S = enum.auto()
    FDIV_D = enum.auto()
    FDIV_H = enum.auto()
    FDIV_Q = enum.auto()
    FDIV_S = enum.auto()
    FENCE = enum.auto()
    FENCE_I = enum.auto()
    FENCE_TSO = enum.auto()
    FEQ_D = enum.auto()
    FEQ_H = enum.auto()
    FEQ_Q = enum.auto()
    FEQ_S = enum.auto()
    FLE_D = enum.auto()
    FLE_H = enum.auto()
    FLE_Q = enum.auto()
    FLE_S = enum.auto()
    FLT_D = enum.auto()
    FLT_H = enum.auto()
    FLT_Q = enum.auto()
    FLT_S = enum.auto()
    FMADD_D = enum.auto()
    FMADD_H = enum.auto()
    FMADD_Q = enum.auto()
    FMADD_S = enum.auto()
    FMAX_D = enum.auto()
    FMAX_H = enum.auto()
    FMAX_Q = enum.auto()
    FMAX_S = enum.auto()
    FMIN_D = enum.auto()
    FMIN_H = enum.auto()
    FMIN_Q = enum.auto()
    FMIN_S = enum.auto()
    FMSUB_D = enum.auto()
    FMSUB_H = enum.auto()
    FMSUB_Q = enum.auto()
    FMSUB_S = enum.auto()
    FMUL_D = enum.auto()
    FMUL_H = enum.auto()
    FMUL_Q = enum.auto()
    FMUL_S = enum.auto()
    FMV_D_X = enum.auto()
    FMV_H_X = enum.auto()
    FMV_W_X = enum.auto()
    FMV_X_D = enum.auto()
    FMV_X_H = enum.auto()
    FMV_X_W = enum.auto()
    FNMADD_D = enum.auto()
    FNMADD_H = enum.auto()
    FNMADD_Q = enum.auto()
    FNMADD_S = enum.auto()
    FNMSUB_D = enum.auto()
    FNMSUB_H = enum.auto()
    FNMSUB_Q = enum.auto()
    FNMSUB_S = enum.auto()
    FSGNJN_D = enum.auto()
    FSGNJN_H = enum.auto()
    FSGNJN_Q = enum.auto()
    FSGNJN_S = enum.auto()
    FSGNJX_D = enum.auto()
    FSGNJX_H = enum.auto()
    FSGNJX_Q = enum.auto()
    FSGNJX_S = enum.auto()
    FSGNJ_D = enum.auto()
    FSGNJ_H = enum.auto()
    FSGNJ_Q = enum.auto()
    FSGNJ_S = enum.auto()
    FSQRT_D = enum.auto()
    FSQRT_H = enum.auto()
    FSQRT_Q = enum.auto()
    FSQRT_S = enum.auto()
    FSUB_D = enum.auto()
    FSUB_H = enum.auto()
    FSUB_Q = enum.auto()
    FSUB_S = enum.auto()
    HFENCE_GVMA = enum.auto()
    HFENCE_VVMA = enum.auto()
    HINVAL_GVMA = enum.auto()
    HINVAL_VVMA = enum.auto()
    HLVX_HU = enum.auto()
    HLVX_WU = enum.auto()
    HLV_B = enum.auto()
    HLV_BU = enum.auto()
    HLV_D = enum.auto()
    HLV_H = enum.auto()
    HLV_HU = enum.auto()
    HLV_W = enum.auto()
    HLV_WU = enum.auto()
    HSV_B = enum.auto()
    HSV_D = enum.auto()
    HSV_H = enum.auto()
    HSV_W = enum.auto()
    J = enum.auto()
    JAL = enum.auto()
    JALR = enum.auto()
    JR = enum.auto()
    LOAD = enum.auto()
    LR_D = enum.auto()
    LR_W = enum.auto()
    LUI = enum.auto()
    MNRET = enum.auto()
    MRET = enum.auto()
    MUL = enum.auto()
    MULH = enum.auto()
    MULHSU = enum.auto()
    MULHU = enum.auto()
    MULW = enum.auto()
    OR = enum.auto()
    ORI = enum.auto()
    PAUSE = enum.auto()
    REM = enum.auto()
    REMU = enum.auto()
    REMUW = enum.auto()
    REMW = enum.auto()
    SC_D = enum.auto()
    SC_W = enum.auto()
    SFENCE_INVAL_IR = enum.auto()
    SFENCE_VMA = enum.auto()
    SFENCE_W_INVAL = enum.auto()
    SINVAL_VMA = enum.auto()
    SLL = enum.auto()
    SLLI = enum.auto()
    SLLIW = enum.auto()
    SLLW = enum.auto()
    SLT = enum.auto()
    SLTI = enum.auto()
    SLTIU = enum.auto()
    SLTU = enum.auto()
    SRA = enum.auto()
    SRAI = enum.auto()
    SRAIW = enum.auto()
    SRAW = enum.auto()
    SRET = enum.auto()
    SRL = enum.auto()
    SRLI = enum.auto()
    SRLIW = enum.auto()
    SRLW = enum.auto()
    STORE = enum.auto()
    SUB = enum.auto()
    SUBW = enum.auto()
    WFI = enum.auto()
    XOR = enum.auto()
    XORI = enum.auto()


# Additional RiscV-specific instruction flags
class RISCV_IF(enum.IntFlag):
    # Indicate normal load/store instructions
    LOAD        = 1 << 8
    STORE       = 1 << 9

    # Indicate this is a compressed load/store instruction that uses the SP (x2)
    # as the base register
    LOAD_SP     = 1 << 10
    STORE_SP    = 1 << 11


# RiscV operand flags
class RISCV_OF(enum.IntFlag):
    SRC         = 1 << 1
    DEST        = 1 << 2
    NON_ZERO    = 1 << 3
    SIGNED      = 1 << 4
    UNSIGNED    = 1 << 5

    # Flags used to indicate size these definitions match those used in the
    # RiscV manual
    BYTE        = 1 << 6   # 1 byte
    HALFWORD    = 1 << 7   # 2 bytes
    WORD        = 1 << 8   # 4 bytes
    DOUBLEWORD  = 1 << 9   # 8 bytes
    QUADWORD    = 1 << 10  # 16 bytes

# Standard types used in the generated instruction list
RiscVInsCat = namedtuple('RiscVInsCat', ['xlen', 'cat'])
RiscVIns = namedtuple('RiscVIns', ['name', 'opcode', 'form', 'cat', 'mask', 'value', 'fields', 'flags'])

# A simple field where the field value can be masked and shifted out of the
# instruction value.
RiscVField = namedtuple('RiscVField', ['name', 'type', 'bits', 'args', 'flags'])

# Many RiscV instructions have complex immediate values like:
#   BEQ  imm[12,10:5] | rs2 | rs1 | imm[4:1,11]
#
# This field type contains a list of mask and shift operations that can be used
# to re-assemble the correct immediate from the instruction value
RiscVImmField = namedtuple('RiscVImmField', ['name', 'type', 'bits', 'args', 'flags'])

# RiscV load/store instructions use an immediate value to define an offset from
# a source/base register This field contains the arguments necessary to extract
# the source register value and immediate offset value from the instruction
# value
#   LWU  imm[11:0] | rs1 | rd
RiscVMemField = namedtuple('RiscVMemField', ['name', 'type', 'bits', 'args', 'flags'])

# RiscV compressed load/store instructions are like normal load/store
# instructions but they always use the x2 (the stack pointer) register as the
# base register
RiscVMemSPField = namedtuple('RiscVMemSPField', ['name', 'type', 'bits', 'args', 'flags'])

# A field type to hold mask/shift arguments for IMM and MEM fields
RiscVFieldArgs = namedtuple('RiscVFieldArgs', ['mask', 'shift'])
